import { NextRequest, NextResponse } from 'next/server'
import { Server as SocketIOServer } from 'socket.io'

// Armazenar instÃ¢ncia do servidor Socket.IO
let io: SocketIOServer | null = null

// Contador de conexÃµes ativas
let activeConnections = 0

// FunÃ§Ã£o para obter ou criar o servidor Socket.IO
function getIO() {
  if (!io) {
    io = new SocketIOServer({
      cors: {
        origin: "*",
        methods: ["GET", "POST"]
      }
    })
    
    // Eventos de conexÃ£o
    io.on('connection', (socket) => {
      activeConnections++
      console.log('ðŸ”Œ Cliente conectado:', socket.id)
      console.log('ðŸ“Š Total de conexÃµes ativas:', activeConnections)
      
      // Cliente se juntou ao dashboard
      socket.on('join-dashboard', () => {
        socket.join('dashboard')
        console.log('ðŸ“± Cliente entrou no dashboard:', socket.id)
        console.log('ðŸ“Š ConexÃµes ativas no dashboard:', activeConnections)
      })
      
      // Cliente se desconectou
      socket.on('disconnect', () => {
        activeConnections--
        console.log('ðŸ”Œ Cliente desconectado:', socket.id)
        console.log('ðŸ“Š Total de conexÃµes ativas:', activeConnections)
      })
    })
  }
  return io
}

// FunÃ§Ã£o para enviar notificaÃ§Ã£o para o dashboard
export function sendNotificationToDashboard(type: string, data: any) {
  const io = getIO()
  io.to('dashboard').emit('notification', { type, data, timestamp: new Date().toISOString() })
  console.log('ðŸ“¡ NotificaÃ§Ã£o enviada para o dashboard:', { type, data })
  console.log('ðŸ“Š Total de conexÃµes ativas:', activeConnections)
}

export async function GET(request: NextRequest) {
  return NextResponse.json({ 
    message: 'Socket.IO Server',
    status: {
      activeConnections,
      isRunning: io !== null
    }
  })
}
